* 填空题

操作系统具有 #并发,共享性,虚拟性,异步(不确定性)# 四种特性

常用的预防"抖动"的方法有 #采用局部置换策略# ,把工作集算法融入到处理机调度中, #挂起若干进程# 和利用"L=S"准则调度缺页率四种

磁盘空间可以分为文件区和 #对换区# 两部分,对文件区的管理采用 #离散# 分配方式
(对换区 连续分配方式)

缺页率受到 =分配给作业的主存块数(多则低) - 物理块,页面的大小(页面大则低),程序编制方法,页面调度算法 = 四个因素影响

磁盘的访问时间可以分为以下三个部分 #寻道时间,旋转延迟时间,传输时间#

目前常用的外存组织方式有连续组织方式 #链接组织方式# 和 #索引组织方式#

描述进程之间执行先后顺序的有向无循环图,也叫 #前趋图#

进程的三种基本形态包括 #运行,就绪,阻塞#
(创建,结束)

虚拟存储器的特征有 #多次性,对换性,虚拟性#
(离散性)

文件按用途可以分为 #系统文件,用户文件,库文件#

外存的链接组织形式可以分为 #显式链接,隐式链接#

分页存储管理中联想存储器又叫做 #快表#

程序的链接分为 #静态链接,装入时动态链接,运行时动态链接#

操作系统的基本类型有 #批处理操作系统,分时操作系统,实时操作系统#

在采用时间片轮转调度算法的分时系统中,当用户数为100时,为保证响应时间不超过2秒,此时时间片最大应为 #20ms#

程序经编译或汇编以后形成的目标程序,其指令的顺序都是以零作参考地址,这些地址称为 #逻辑地址#

请求页面分页操作系统在基本分页的系统的基础上,增加了 #请求调页功能# 和 #页面置换功能# 所形成的页式虚拟存储系统

主存储器与外围设备之间的数据传送控制方式有 #程序直接控制,中断驱动方式,DMA方式,通道控制方式#

为实现设备的独立性,系统必须设置一张 #逻辑设备表(LUT)# 将用于应用程序中所使用的逻辑设备名映射为物理设备名

文件的物理结构分为 #顺序文件,索引文件,索引顺序文件#

UNIX的文件系统空闲空间的管理是采用 #成组链接法#

在一个分页式存储管理系统中,页表的内容如下,若页面大小为4k,则地址转换机构将对应地址0转换成的物理地址是 #8192#
| 页号 | 块号 |
|    0 |    2 |
|    1 |    1 |
|    2 |    7 |

I/O设备可以按信息交换的单位分为字符设备和 #块设备#

如果利用30行, 40列的位示图来标志空闲盘块的状态,在进行盘块分配时,当第一次找到的空闲盘块(即该位置为0)处于第11行,第18列,则相应的盘块号为 #418#

#并发# 和共享是操作系统的两个最基本的特征,它们又是互为存在的条件

#缓冲# 可以有效地缓解CPU与I/O设备速度不匹配的矛盾

进程实体由程序段,相关数据段和 #进程控制块(PCB)# 三部分构成

进程的三种基本状态是 #就绪,执行,阻塞#

所谓"管道"是指用于连接一个读进程和一个写进程以实现他们之间通信的一个共享 #文件#

在装入时对目标程序中指令和数据地址的修改过程称为 #重定位#

在采用分页存储管理的系统中,页面大小为1KB,如果逻辑地址为2175B,则页号为 #2# ,页内地址为 #127#


与传统的存储器管理方式比较,虚拟存储器有以下三个重要特征 #多次性,对换性,虚拟性#

文件系统管理的对象有文件, #目录# , 和磁盘存储空间

根据文件组织的方式, 可以把结构文件分为顺序文件,引索文件和 #引索顺序文件#



* 判断题
[T] 推动分时系统形成和发展的主要动力是为了满足用户对人机交互的需求

[T] 处于执行状态下的进程,可以转换成就绪状态,阻塞状态和终止态

[T] 进程控制块PCB是一个数据结构

[T] 银行家算法可以用于避免死锁的产生

[T] 在分段系统中,用户程序的地址空间是二维的

[F] 在内存的动态分区管理方式中,回收内存时空闲分区的个数一定会增加

[F] 直接存储器访问方式中,数据传输的基本单位是字节

[F] 目录管理中系统不允许不同用户对不同文件采用相同的名字

[F] 采用连续组织方式管理磁盘空间,事先不必知道文件的长度

[F] 假脱机技术可以将物理CPU虚拟为多台逻辑CPU,从而允许多个用户共享一台主机

-----

[F] 多通道批处理系统允许多个程序同时执行
(只是同一批次调入内存,放在内存不同部分,当一个作业由等待输入操作而让处理机空闲.系统自动切换处理另一个作业)

[F] 线程是资源分配的最小单位
(进程)

[T] 进程的创建必须申请一个空白的PCB

[F] 整型型号量满足同步机制遵循的四个基本原则是最常用的进程同步控制方式

[F] 为预防死锁,我们需谨慎的分配资源,保障系统处于安全状态

[F] 分页存储管理中页面大小可以任意设置

[F] 进程的状态可以是相互转换的,"执行"到"阻塞","阻塞"到"执行"

[T] 分段存储管理比分页存储管理更容易实现信息的保护

[T] 一个进程可以有多个线程,一个线程也可以有多个子线程

[F] 虚拟存储器的大小受到内存,外存的限制,因此,外存越大,虚拟内存空间可以设置得越大

[F] 磁盘扫描算法中,FCFS算法会导致进程"饥饿"现象,而SCAN算法可以防止此现象的发生

[T] Spooling 系统实现了虚拟设备功能

[F] 相对路径是从根目录开始到达指定文件或目录的唯一通路

[T] 分段存储管理中段的划分是在程序编译时系统自动设置的

[T] 用户线程可以被内核感知

-----

[F] 操作系统是系统软件的一种,在进行系统安装时可以先安装其他软件,然后再装操作系统

[F] 并发性是指若干事件在同一时刻发生

[T] 对临界资源应该采取互斥访问方式在实现共享

[T] 原语是一种不可分割操作

[F] 线程是最小拥有资源的单位

[T] 管道是指用于连接一个读进程和一个写进程以实现他们之间的通信的一个共享文件

[T] 假定系统有10台磁带机, 进程p1,p2,p3分别要求9台,3台和8台.假设在T0时刻,进程p1,p2,p3分别获得2台,2台,4台,尚有2台空闲,则T0时刻系统是安全的

[T] 长程调度主要用于多道批处理系统中,而在分时和实时系统中不设置

[F] 新创建一个进程时,将把它所需要的所有资源分配给它,因此可以立即投入运行

[T] 树型目录结构能够解决文件重名问题

[T] 通道一旦被启用就能独立CPU运行,这样可以使CPU和通道并行操作

[F] 页式管理比段式管理更易于实现不同进程之间的信息共享

[T] 缓冲技术可以改善中央处理器与外围设备之间速度不匹配的矛盾

[F] 位示图是一种磁盘调度算法

[T] 在利用符号链接方式实现文件共享时,只是文件主才拥有指向其索引节点的指针

-----

[F] 操作系统中的并发是指两个或多个事件在同一时刻发生

[T] 实时操作系统是指系统能及时响应外部事件的请求,在规定的时间内完成对该事件的处理,并控制所有的实时任务协调一致的运行

[F] 操作系统中所谓"虚拟"是指,通过某种技术把一个物理实体变为若干个物理实体

[T] 原语是由若干条机器指令所构成,用以完成特定功能的一段程序,原语在执行期间是不可分割的或不可中断的

[F] 进程是拥有资源的基本单位,管程是调度的基本单位

[F] 银行家算法是一种预防死锁的方法
(是一种避免死锁的著名算法)

[T] 动态运行时装入方式在把装入模块装入内存后, 并不立即吧装入模块中的相对地址转化为绝对地址,而是把这种地址转换推迟到程序真正要执行的时候

[F] 虚拟存储器是一种能从物理上对内存容量加以扩充的存储器系统

[T] 在页面置换算法中,最佳置换算法有最好的性能,但实际无法实现的

[F] 磁盘和打印机都是块设备




* 选择题
作业提交系统到作业完成的时间间隔称为 #周转时间#

所谓动态重定位.地址变换是发生在 #程序执行时#

下面最有可能使得高地址空间成为最大空闲的分配算法是 #首次适应算法#

下名关于虚拟存储器的叙述中,正确的是 #要求程序运行前必须全部装入内存且在运行过程中一直驻留内存#

一个页式存储管理的系统中,逻辑地址3654,页的大小为1K,那么该逻辑地址的页号和页内地址是 #3,582#

按设备的共享属性分类可以分为 #独占设备,共享设备,虚拟设备#

直接数据传输DMA方式是 #设备和主存储器直接传输数据#

CPU输出数据的速度远远高于打印机的打印速度,为解决这一矛盾采用 #缓冲#

利用SpooLing技术实现虚拟设备的目的是 #把独享的设备变为可以共享的#

UNIX的引索表直接包含在文件引索节点中,索引表共13个表项,10个用于直接寻址方式,其余三个分别用于一级,二级,三级缓存寻址方式,假定一个物理块的大小为1KB,索引表中每个表项占4个字节,那么文件大小不超过多少时,可以组成直接寻址文件
#10KB#

C临界区是指 #访问临界资源的一段代码#

D进程所请求求的一次打印输出结束后将使进程状态从 #阻塞态变成就绪态#

A段页式存储管理汲取了页式管理和段式管理的长处,其实现原理结合了页式和段式管理的基本思想,即 #用分段方法来分配和管理用户地址空间,用分页方法来管理物理存储空间#

B若一个系统内存有64M,处理器是32位地址,则它的虚拟地址空间为 #4GB# 字节

C假定盘块的大小为1K,对于1.2MB的软盘,在FAT12文件系统下,FAT表需要占用 #1.8k# 的存储空间
(1.2MB/1KB*1.5byte = 1.8KB) 12bit = 1.5byte

D在操作系统中,用户在使用I/O设备,通常采用 #逻辑设备名#

A操作系统采用缓冲技术,能减少对CPU的 #中断#

B文件目录的最基本功能是 #按名存取#

C若系统中有五台绘图仪, 有多个进程均需要使用两台,规定每个进程一次仅允许申请一台, 则至多允许 #4# 个进程参与竞争,而不会发生死锁

D在现代操作系统中采用缓冲技术的主要目的是 #提高CPU个I/O设备之间的并行性#

-----

C 下面不属于操作系统目标的描述是 #虚拟性#

B 对磁盘I/O控制采用 ## 方式

B 高级调度的主要功能是从处于 #后备# 状态的队列中选择适当的作业调入内存

A 下列描述正确的是 #进程的阻塞是当条件不满足时,由进程自己调用Block原语把自己阻塞起来#

B 一台计算机系统,内存2GB, 硬盘大小 500GB, 安装了 64位操作系统,请问其虚拟内存空间大小是多少 #500G+2G#

B 就绪状态进程被挂起,状态将变为 #静止就绪#

C 某个信号量s的初值为2,当前值为-3,采用记录型信号量控制,在该信号量的进程数为 #3# 个

D 下面对进程死锁描述错误的是 #只要不出现资源竞争,系统就不会出现死锁#

A 页面大小为1000, 设基地址寄存器的内存为2000, 在采用动态重定位的系统中,当执行指令 "LOAD X, 2500"时,操作数的物理地址是 #2500#

B 要求在规定的时间内对外界的请求必须给予相应的OS是 #实时系统#

A 磁带机属于 #顺序存取# 设备

A 时间片轮转法进行进程调度是为了 #多个终端都能得到系统的及时响应#

A 采用段页式存储管理中, 若地址用32位表示 ,其中20位表示段号,则允许每段的最大长度是 #2^12#

D 下列对线程的描述正确的是 #线程可以并发执行#

C 从就绪队列选择一个进程,使其获得处理机,属于 #进程调度#

-----

C 一个正在CPU上运行的进程,其进程状态 #可以转变为就绪状态,也可以转变为阻塞状态#

B 同一系统中进程之间即相互依赖又相互制约,如果两个进程同时要用一台打印机,其中一个进程必须等待,这种关系称为 #互斥#

D 对应资源编号, 要求进程按照序号顺序申请资源,是破坏死锁比必要条件中的那一条? #循环等待#

B 设有n个进程使用同一个共享变量,如果最多允许m (m < n) 个进程同时进入相关临界区,则信号量的变化范围是 #m,m-1,m-2,......,1,0,-1,...,m-n#

B 既考虑作业等待时间,又考虑作业执行时间的调度算法是 #高响应比优先#

A 从作业提交系统到作业完成的时间间隔称为 #周转时间#

B 所谓动态重定位,地址变换是发生在 #程序执行时#

A 下面最有可能使高地址空间成为最大空闲分区的分配算法是 #首次适应法#

B 在下面关于虚拟存储器叙述中,正确的是 #要求程序运行前不必全部装入内存且在运行过程中不必一直驻留在内存#

A

D

A

C

A

C

-----

A 下面哪一个不是分时系统的基本特征 #同时性#

B 下面关于进程状态转换的说法中错误的是 #可以由就绪态转换为阻塞态#

D 下面哪项不是进程控制块中保护的信息? #进程代码#

A 决定把外存上处于后备队列中的那些作业调入内存,并为他们创建进程,分配必要的资源,排在就绪队列上 属于哪种调度的任务 #高级调度#

D 下面说法, 错误的是 #平均周转时间短是分时操作系统中选择进程调度算法的重要准则#

C 下面那个属于实时调度算法? #最早截止时间优先调度算法#

C 下列说法中错误的是 #采用装入时动态链接方式,凡在执行过程中,未被用到的目标模块都不会被调入内存和被链接到装入模块上#

A 下面关于分页存储管理方式,和分段存储管理方式说法中错误的是 #分段存储管理方式比分页存储管理方式更利于信息共享#

C 下面哪项不属于I/O系统的基本功能 #提高主存储器利用率#

B 按照数据存取和传输单位分类,设备可以分为 #块设备和字符设备#


* 名词解释
*** 局部性原理
(1)程序在执行时呈现局部性规律
(2)在一较短时间内,程序的执行仅局限于某个部分
(3)相应的,所访问的存储空间局限于某个区域

*** 低级调度
(1)低级调度又称进程调度,短程调度,
(2)它决定就绪队列中哪个进程将获得处理机,
(3)然后由分派程序执行把处理机分配给该进程的操作

*** 延迟写
(1)延迟写是指缓冲区A中的数据本应该立即写回磁盘,但考虑到该缓存区的数据可能在不久之后再被本进程或其他进程访问,因而并不理解将该缓冲区A中的数据写入磁盘,而是将它挂在空闲缓冲区队列末尾
(2)当有进程申请到该缓冲区时,才将该缓冲区中的数据写入磁盘

*** 中级调度
(1)按照给定的原则和策略,将外存交换区中的进程调入内存,把内存中的非执行进程交换到外存交换区
(2)中级调度时存储器管理中的对换功能

*** 设备独立性
(1)设备独立性即在应用程序中所使用的设备,不局限于使用某个具体物理设备
(2)应用程序用逻辑设备名称来请求使用某类设备.系统在执行时,使用物理设备名称

*** 临界区
(1)一个程序片段的集合,这些程序片段分散在不同的进程中,对某个共享的数据结构(共享资源)进行操作
(2)进程中涉及到临界资源的程序段叫做临界区

*** 管程
(1)管程定义了一个数据结构和能为并发进程在该数据结构上所执行的一组操作,这组操作能同步进程和改变管程中的数据
(2)管程由局部与管程的共享变量说明,对该数据结构进行操作的一组过程以及局部于管程的数据初始化语句

*** 通道(I/O处理机)
(1)通道是独立于CPU的专门负责数据输入/输出传输工作的处理机
(2)对外部设备实现统一管理,代替CPU对输入/输出操作进行控制,从而使输入输出操作可以与CPU并行操作

*** 进程控制块(PCB)
(1)系统为管理进程设置的一个专门的数据结构,用它来记录进程的外部特征,描述进程变化过程
(2)系统利用PCB来控制和管理进程,所以PCB是系统感知进程存在的唯一标志.进程与PCB是一一对应的

*** 虚拟存储器
(1)所谓虚拟存储器,是指具有请求调入功能和置换功能
(2)能从逻辑上对内存容量加以扩充的一种存储器系统

*** 死锁
(1)指多个进程因竞争资源而造成的一种僵局
(2)若无外力作用,这些进程将永远不能再向前推进

*** 对换
(1)所谓"对换",是指把内存中暂不能运行的进程或者暂时不用的程序和数据换出到外存上,以便腾出足够的内存空间
(2)再把已具备运行条件的进程或者进程所需要的程序和数据换入内存





* 简答题与计算题
  *** 从调度性,并发性,拥有资源及系统开销方面对进程和线程进行比较
(1)调度方面.在引进线程之前,进程是调度和分派的基本单位,每次被调度时都需要进行上下文切换,开销较大.引进线程后,线程是调度和分派的基本单位.当线程切换时,仅需保存和设置少量寄存器内容,切换代价远低于进程.
(2)并发性方面,在引入线程的OS中,不仅进程之间可以并发执行,而在一个进程中的多个线程之间亦可并发执行
(3)拥有资源方面,进程可以拥有资源,并作为一个操作系统拥有资源的一个基本单位,线程本身不具备系统资源,而是仅有一点必不可少的,能保证独立运行的资源,多个线程共享进程所拥有的资源
(4)系统开销方面,线程创建,撤销,切换,同步和通信时所付出的开销都小于进程对应操作的开销

*** 何谓用户级线程和内核支持级线程
(1)用户级线程是在用户空间中实现,对线程创建,撤销,同步和通信功能,都无需内核的支持,即用户线程与内核无关,内核完全不知道用户级线程的存在
(2)内核支持线程是在内核的支持下运行的,他们的创建,阻塞,撤销,切换等,也都是在内核空间实现的.为了对内核线程的控制和管理,在内核空间也为每一个内核线程设置一个线程控制块,内核根据该控制块而感知某线程的存在,并对其加以控制

*** 在请求分页管理系统中,产生抖动的原因是什么
(1)产生抖动的原因是,同时在系统运行的进程太多
(2)由此分配给没每一个进程的物理块太少,不能满足程序正常执行的基本要求,致使每个进程在运行的时候,频繁的抛出缺页,必须请求系统将所缺页调入内存
(3)这会使得在系统中排队等待页面调入/调出的进程数目增加.显然,对磁盘的有效访问时间也随之急剧增加,造成每个进程的大部分时间都用于页面的调入/调出,而几乎不能再去做任何有效的工作,从而导致处理机的利用率急剧下降并趋于0的情况,此时的进程是处于"抖动"状态

*** 试说明设备驱动程序具有那些特点
(1)是请求I/O进程与设备控制器之间的一个通讯程序
(2)驱动程序与I/O设备的特性紧密相连
(3)驱动程序与I/O控制方式紧密相关
(4)驱动程序与硬件紧密相关
(5)部分程序由汇编语言书写,基本部分往往固化在ROM中

*** 在银行家算法中,若出现下述资源分配情况试问:
| Process | Allocation | Need | Available |
| P0      |       0022 | 0012 |      1612 |
| P1      |       1030 | 1230 |           |
| P2      |       1000 | 3657 |           |
| P3      |       1303 | 2356 |           |
| P4      |       0002 | 0652 |           |

(1)该状态是否安全?若安全给出一个安全序列

| Process | Allocation | Need | Available | (Finally)=Allocation+Available | order |
| P0      |       0022 | 0012 |      1612 |                           1634 |     1 |
| P1      |       1030 | 1230 |      1634 |                           2664 |     2 |
| P2      |       1000 | 3657 |      3909 |                           4909 |     5 |
| P3      |       1303 | 2356 |      2666 |                           3909 |     4 |
| P4      |       0002 | 0652 |      2664 |                           2666 |     3 |
P0 -> P1 -> P4 -> P3 -> P5

(2)若进程P3提出请求(1,2,0,0)后,系统能否将资源分配给它,若能分配,给出一个安全序列

| Process | Allocation | Need | Available | (Finally) | order |
| P0      |       0022 | 0012 |      1612 |      1634 |     1 |
| P1      |       1030 | 1230 |      2937 |      3967 |     3 |
| P2      |       1000 | 3657 |      3969 |      4969 |     5 |
| P3      |       1303 | 1200 |      1634 |      2937 |     2 |
| P4      |       0002 | 0652 |      3967 |      3969 |     4 |

P0 -> P3 -> P1 -> P4 -> P5

*** 作业A的页表如下所示

| 页号 | 块号 | 状态位 | 访问位 | 修改位 |
|    0 |    6 |      1 |      1 |      1 |
|    1 |    4 |      1 |      0 |      0 |
|    2 |    5 |      1 |      1 |      0 |
|    3 |      |      0 |      0 |      0 |

(1)指出页表中状态位,访问位,修改位的含义?
状态位表示对应的页已经调入内存
访问位表示该页面在一段时间内被访问的次数
修改位表示该页面调入内存后是否被修改

(2)逻辑地址 1800B,对应的物理地址是多少?
P = INT(1800B/1024B) = 1,
d = 1800B mod 1024B = 776
对应的物理块为4, 物理地址 4*1024B + 776 = 4872B

(3)当执行到逻辑地址为 3600B时,会发生什么现象?
P = INT(3600B/1024B) = 3 , 3页面还没有调入内存,产生缺页中断


*** 某个银行提供一个服务窗口和10个供顾客等待的座位.顾客到达银行时,如果有空座位,才允许到取号机上取一个号,等待叫号,取号机每次仅允许一个顾客使用,当营业员空闲通过叫号机选取一位顾客.客和营业员的活动过程描述如下:

#+BEGIN_SRC c
  cobegin {
      process 顾客{
          从取号机获得一个号码;
          等待叫号;
          获得服务;
      }

      process 营业员{
          while(true){
              叫号;
              为顾客服务;
          }
      }
  }coend
#+END_SRC

请添加必要的信号量和 P,V(或者wait(),signal())操作实现上述过程中的互斥与同步.要求写出完整过程,说明信号量的含义并赋予初值

#+BEGIN_SRC c
  cobegin {
      Semaphore seats = 10;
      Semaphore mutex = 1;
      Semaphore custom = 0;
      process 顾客{
          P(seats);
          P(mutex);
          从取号机获得一个号码;
          V(mutex);
          V(custom); //发送信号表示有顾客
          等待叫号;
          V(seats);
          获得服务;
      }

      process 营业员{
          while(true){
              叫号;
              为顾客服务;
          }
      }
  }coend
#+END_SRC
P 表示通过
V 表示释放
当通过PV 实现进程同步的时候,
P 测试消息是否到达
V 操作发生消息

*** 什么叫紧凑? 为什么要进行紧凑?
(1)为了解决碎片问题,可采用的一种方法是,将内存中的所有作业进行移动,使它们相邻接
(2)原来分散的多个小分区便拼接成一个大分区,从而就可以把作业装入运行,这种通过移动把的多个小分区拼凑成大分区进行紧凑的目的是为了提高内存的利用率

*** 什么是死锁?原因是?产生死锁的条件是?解决死锁的办法有?
(1)死锁是指多个进程因进程竞争资源而造成的一种僵局,若无外力作用,这些进程将永远不能再向前推进.产生思索的原因可归结为两点,竞争资源,进程推进顺序非法.
(2)在具备下述四个条件的时候,就会产生死锁.互斥条件,请求和保持条件,不剥夺条件,环路等待条件
(3)银行家算法,安全序列

*** 什么是请求分页系统?它需要那些方面的硬件机构支持?
(1)请求分页系统是在分页系统的基础上,增加了请求调页功能,页面置换功能所形成的页式虚拟存储系统
(2)为了实现请求调页和置换功能,系统必须提供必要的硬件支持.其中,最重要的是:请求分页的页表机制,缺页中断机构,地址变换机构


*** 在一个单批道处理系统中,一组作业的提交时间和运行时间如下表
|    | 作业提交 | 时间运行时间 |
| J1 |     8:00 |          1.0 |
| J2 |     8:50 |         0.50 |
| J3 |     9:00 |         0.20 |
| J4 |     9:10 |         0.10 |

*** 试计算以下三种作业调度算法的平均周转时间和平均带权周转时间:先来先服务;短作业优先;响应比高优先
先来先服务(FCFS):
|    | 作业提交 | 时间运行时间 | 完成时间 | 周转时间 | 带权      |
| J1 |     8:00 |          1.0 |     9:00 | 1.0      | 1/1       |
| J2 |     8:50 |         0.50 |     9:30 | 40/60    | 2/3/0.5   |
| J3 |     9:00 |         0.20 |     9:42 | 42/60    | 42/60/0.2 |
| J4 |     9:10 |         0.10 |     9:48 | 38/60    | 38/60/0.1 |
#+BEGIN_SRC emacs-lisp
  (/ 2 3 0.5)
  (/ 42 60 0.2)
#+END_SRC

T = (1.0 + 0.67 + 0.7 + 0.63)/4 = 0.75
W = (1.0 + 1.34 + 3.5 + 6.3)/4 = 3.035


短作业优先(SJF)

|    | 作业提交 | 时间运行时间 | 完成时间 | 周转时间 | 带权      |
| J1 |     8:00 |          1.0 |     9:00 | 1.0      | 1/1       |
| J2 |     8:50 |         0.50 |     9:48 | 58/60    | 58/60/0.5 |
| J3 |     9:00 |         0.20 |     9:12 | 12/60    | 12/60/0.2 |
| J4 |     9:10 |         0.10 |     9:18 | 8/60     | 8/60/0.1  |
#+BEGIN_SRC emacs-lisp
  (/ 58 60 1.0)
  (/ 12 60 1.0)
  (/ 8 60 1.0)
  (/ (+ 1.0 0.96 0.2 0.13) 4)

  (/ 58 60 0.5)
#+END_SRC

T = (1.0 + 0.96 + 0.2 + 0.13) /4 = 0.5725
W = (1.0 + 1.94 + 1 + 1.3) /4 = 1.31

高响应算法
响应比 = (要求服务时间 + 等待时间)/要求服务时间 = 1 + (等待时间/要求服务时间)
如果不是都到达再处理,那么还是把地一个先到的处理了

|    | 作业提交 | 时间运行时间 | 在某一时刻响应比                    | 完成时间 | 周转时间 | 带权      |
| J1 |     8:00 |          1.0 | 这时只有该到达完成J1                |     9:00 | 1.0      | 1/1       |
| J2 |     8:50 |         0.50 | J2/J3 J2=1+10/30 J3=1 故完成J2      |     9:30 | 40/60    | 40/60/0.5 |
| J3 |     9:00 |         0.20 | J3/J4 J3=1+30/12 J4=1+20/6 故完成J4 |     9:48 | 48/60    | 48/60/0.2 |
| J4 |     9:10 |         0.10 |                                     |     9:36 | 26/60    | 26/60/0.1 |
#+BEGIN_SRC emacs-lisp
  (/ 40 60 1.0)
  (/ 48 60 1.0)
  (/ 26 60 1.0)
#+END_SRC

-----

*** 在一个请求分页存储管理系统中,一个程序的页面走向为6, 0, 1, 2, 0, 3, 0, 4, 2, 3,分别采用最佳置换算法,先进先出,最近最久未使用算法,完成下列要求.
设分配给该程序的存储块数M=3, 每调进一个新页就发生一次缺页中断.计算各算法的缺页次数和置换次数

最佳置换算法:(OPT)
| order     | 6 | 0 | 1 | 2 | 0 | 3 | 0 | 4 | 2 | 3 |
|           |   |   |   |   |   |   |   |   |   |   |
| M=1       | 6 | 6 | 6 | 2 | 2 | 2 | 2 | 2 | 2 | 2 |
| M=2       |   | 0 | 0 | 0 | 0 | 0 | 0 | 4 | 4 | 4 |
| M=3       |   |   | 1 | 1 | 1 | 3 | 3 | 3 | 3 | 3 |
| interaput | x | x | x | x |   | x |   | x |   |   |
| exchange  |   |   |   | x |   | x |   | x |   |   |
中断6次
置换3次

先进先出算法:(FIFO)
| order     | 6 | 0 | 1 | 2 | 0 | 3 | 0 | 4 | 2 | 3 |
|           |   |   |   |   |   |   |   |   |   |   |
| M=1       | 6 | 6 | 6 | 2 | 2 | 2 | 2 | 4 | 4 | 4 |
| M=2       |   | 0 | 0 | 0 | 0 | 3 | 3 | 3 | 2 | 2 |
| M=3       |   |   | 1 | 1 | 1 | 1 | 0 | 0 | 0 | 3 |
| interaput | x | x | x | x |   | x | x | x | x | x |
| exchange  |   |   |   | x |   | x | x | x | x | x |
中断5次
置换6次

最近最久未使用:(LRU)
| order     | 6 | 0 | 1 | 2 | 0 | 3 | 0 | 4 | 2 | 3 |
|           |   |   |   |   |   |   |   |   |   |   |
| M=1       | 6 | 6 | 6 | 2 | 2 | 2 | 2 | 4 | 4 | 4 |
| M=2       |   | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 3 |
| M=3       |   |   | 1 | 1 | 1 | 3 | 3 | 3 | 2 | 2 |
| interaput | x | x | x | x |   | x |   | x | x | x |
| exchange  |   |   |   | x |   | x |   | x | x | x |

-----

*** 有一间阅览室,有100个座位,读者进入时必须先在一张登记表上登记,该表为每一座位列一表目,包括座号和读者姓名,读者离开时要销掉登记内容,用PV操作描述读者进程同步结构
#+BEGIN_SRC c
  mutex = 1; //互斥信号
  full = 100; //同步信号
  table: array 0 ... ... n-1 of item
  procedure reader;
  begin
      P(full);
      P(mutex);
      Register_name(table);
      V(mutex);
      Reading;
      P(mutex);
      Delete_name(table);
      V(mutex);
      V(full);
  end;

#+END_SRC

*** 如图1所示,系统中有三个进程GET,PRO,PUT,共用两个缓冲BUF1,BUF2.假设BUF1中最多可以存放11个信息,现已放入两个信息,BUF2最多可以存放5个信息.GET进程负责不断地将输入信息送入BUF1中,PRO进程负责从BUF1中取出信息并进行处理,并将处理结果送到BUF2中,PUT进程负责从BUF2中读取结果并输出.试写出正确实现GET,PRO,PUT的同步与互斥算法
(1)用类C语言描述,条理清晰,注释恰当;
(2)信号量原语使用wait,signal,或者PV操作描述
#+BEGIN_SRC c
  int Buf1_Idle = 9;
  int Buf1_Busy = 2;
  int Buf2_Idle = 5;
  int Buf2_Busy = 0;
  int mutex1 = mutex2 = 1;

  void GET(){
      while(1){
          P(Buf1_Idle);
          P(mutex1);
          sendto BUF1;
          V(Buf1_Busy);
          V(mutex1);
      }
  }

  void PRO(){
      while(1){
          P(Buf1_Busy);
          P(mutex1);
          recefrom BUF1;
          V(mutex1);
          V(Buf1_Idle);

          P(Buf2_Idle);
          P(mutex2);
          sendto BUF2;
          V(mutex2);
          V(Buf2_Busy);
      }
  }

  void PUT(){
      while(1){
          P(Buf2_Busy);
          P(mutex2);
          printf(BUF2);
          V(mutex2);
          V(Buf2_Idle);
      }
  }

  int main() {
      Cobegin
          GET(),
          PRO(),
          PUT();
      Coend;
      return 0;
  }
#+END_SRC

-----

*** 假定某在磁盘上,处理访问56号磁道的请求后,现正在70号磁道上读信息,目前有下面的请求访问磁盘磁道的序列
73,68,100,120,60,108,8,50,请写出
(1)用最短寻道时间优先算法(SSTF),列出响应磁道次序,并计算平均寻道长度
68,73,60,50,8,100,108,120
(2+5+13+10+42+92+8+12)/8 = 23
(2)用电梯调度算法,列出响应的磁道次序,并计算平均寻道长度
73,100,108,120,68,60,50,8
(3+27+8+12+52+8+10+42)/8 = 20.25
#+BEGIN_SRC emacs-lisp
(/ (+ 2 5 13 10 42 92 8 12) 8.0)
(/ (+ 3 27 8 12 52 8 10 42) 8.0)
#+END_SRC

-----

*** 什么是进程?什么是线程
?进程与线程有何区别?
(1)进程是具有独立功能程序在某个数据集合上的一次执行过程
(2)线程是进程内一个执行实体或执行单元
(3)进程和线程的区别:
a)不同的进程的地址空间是独立的,而同一进程内的线程共享同一地址空间.一个进程的线程咋另一个进程中是不可见的.
b)在引入线程的操作系统中,进程是资源分配和调度的单位,线程是处理机调度和分配的单位,资源是分配给进程的,线程只拥有很少的资源,因而切换代价比进程切换低

*** 何谓系统调用?它与一般的过程调用有何区别?
从而使用户在自己的程序中可获得OS提供的服务,如打开文件,创建子进程
系统调用与一般的过程调用的区别主要有如下几点:
1)运行在不同的系统状态:一般的调用程序和被调用的程序都运行在相同的状态(系统态或者用户态);而对系统调用,其调用程序是运行在用户态,而被调用程序则运行在系统态
2)通过软中断进入;一般的过程调用可以通过过程调用语句直接由调用过程转向被调用过程;而系统调用则必须通过执行系统调用命令(也称作访管指令),由软中断(或陷入机制)转向相应的系统调用处理程序,同时CPU的执行状态将由用户状态转换为系统态
3)返回问题:一般的过程调用在被调用过程执行完后,将直接返回到调用过程继续执行;对系统调用,如果用抢占方式,则在被调用过程执行完后,必须先对运行的进程做优先权分析,只当调用进程仍具有最高优先权时,才返回到调用进程继续执行否则,将引起重新调度

-----

*** 产生死锁的必要条件有哪些?处理死锁的基本方法有哪些?
(1)产生的必要条件:互斥条件,请求和保持条件,不剥夺条件,环路等待条件
(2)处理的方法:预防死锁,避免死锁,检测死锁,解除死锁

*** 请画出I/O系统层次结构
| 用户层软件   |
| 设备独立性   |
| 设备驱动程序 |
| 中断处理程序 |
| 硬件         |

*** 外存的组织方式,链接组织方式相对连续组织方式,有哪些优点?链接组织方式又可以分为哪两种形式?
(1)消除了外部碎片,故而显著提高了外存空间利用率
(2)对插入,删除和修改记录都非常容易
(3)当文件动态增长时,可以动态地再为它分配盘块,无需事先知道文件大小
分为:显式链接和隐式链接


*** 文件系统中对目录管理有那些要求
(1)实现"按名存取"
(2)提高对目录的检索速度
(3)文件共享
(4)允许文件重名

-----

*** 在采用分页存储管理系统中,页面大小为1K,一个三页长的进程,其页表如下

| 页号 | 页框号 |
|    0 |      2 |
|    1 |      3 |
|    2 |      8 |
请分别计算逻辑地址为100和2500的两条指令的物理地址

100:
INT(100/1024) = 0
物理地址:
2 * 1024 + 100 = 2148

2500
INT(2500/1024) = 2
2500 - 1024 * 2 = 452
物理地址:
8 * 1024 + 452 = 8644

-----

*** 在一个请求分页系统中有一用户作业,它要一次访问字的地址序列是:
114,218,120,46,158,440,102,323,432,260,360,167
现在分配给该作业耳朵主存一共300字,页的大小为100字,试问采用最佳置换算法(OPT),最近最近未使用算法(LRU),发生页面置换的次数是多少?

首先将其对换为页面
1,2,1,0,1,4,1,3,4,2,3,1

OPT:
|           | 1 | 2 | 1 | 0 | 1 | 4 | 1 | 3 | 4 | 2 | 3 | 1 |
|           |   |   |   |   |   |   |   |   |   |   |   |   |
| M=1       | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 3 | 3 | 3 | 3 | 1 |
| M=2       |   | 2 | 2 | 2 | 2 | 2 | 2 | 2 | 2 | 2 | 2 | 2 |
| M=3       |   |   |   | 0 | 0 | 4 | 4 | 4 | 4 | 4 | 4 | 4 |
| interaput | x | x |   | x |   | x |   | x |   |   |   | x |
| exchange  |   |   |   |   |   | x |   | x |   |   |   | x |
发生3次置换

LRU:

|           | 1 | 2 | 1 | 0 | 1 | 4 | 1 | 3 | 4 | 2 | 3 | 1 |
|           |   |   |   |   |   |   |   |   |   |   |   |   |
| M=1       | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 2 | 2 | 2 |
| M=2       |   | 2 | 2 | 2 | 2 | 4 | 4 | 4 | 4 | 4 | 4 | 1 |
| M=3       |   |   |   | 0 | 0 | 0 | 0 | 3 | 3 | 3 | 3 | 3 |
| interaput | x | x |   | x |   | x |   | x |   | x |   | x |
| exchange  |   |   |   |   |   | x |   | x |   | x |   | x |
发生了4次置换

-----

*** 假定在某磁盘上处理了访问49号磁道的请求后,现在正在69号磁道上读信息,目前有下面的请求访问磁盘磁道的序列
74,68,100,120,60,108,8,41
(1)用最短寻道时间优先(SSTF),列出响应磁道次序,并计算平均寻道长度
68,74,60,41,8,100,108,120
(1+6+14+19+33+92+8+12)/8 = 23.125

(2)用电梯调度算法,列出磁道次序,并计算平均寻道长度
74,100,108,120,68,60,41,8
(5+26+8+12+52+8+19+33)/8 = 20.375

#+BEGIN_SRC emacs-lisp
(/ (+ 1 6 14 19 33 92 8 12) 8.0)
(/ (+ 5 26 8 12 52 8 19 33) 8.0)

#+END_SRC

-----

*** 某个寺庙,有小和尚,老和尚若干.寺庙里有一水缸,供取水喝.水缸可以容纳30桶水,每次入水,取水仅为一桶,不可同时进行.水取自同一井中,水井只能一个桶取水.水桶个数为5个,请用wait,signl信号量给出老和尚和小和尚并发过程,下面给出了程序框架,请完善信号量的定义并赋予初始值

#+BEGIN_SRC c
  semaphore
  mutex_jar = 1, mutex_wel = 1, empty = 30, full = 5, bucket = 5;

  void 小和尚(){
      while(1){
          wait(empty);
          wait(bucket);
          提桶到井边;
          wait(mutex_wel);
          把桶放入井中取水;
          signal(mutex_wel);
          提着水进寺庙;
          wait(mutex_jar);
          把水倒入缸中;
          signal(mutex_jar);
          signal(bucket);
          signal(full);
      }
  }

  void 老和尚(){
      while(1){
          wait(full);
          wait(bucket);
          wait(mutex_jar);
          用桶到缸中取水饮用;
          signal(mutex_jar);
          signal(bucket);
          signal(empty);
      }
  }

  void main(){
      cobegin
          小和尚(),
          老和尚();
      coend
  }
#+END_SRC



* 各种算法知识点小结

** FAT12的FAT表大小计算


** 银行家算法
由available的最大值,(随意满足)满足客户Need后回收(其allocation),拥有更大avaliable后再去满足下一位(任一)客户直到完成
只要最后能完成就是一个安全序列

根据题目描述提出请求的就是下一个满足对象


** 最佳置换算法
由需要发生的时间来决定淘汰那个,比如
7,0,1,2,0,3,0,4,2,3,2,1,2,0,1,7,0,1
| 现在内存 |                                                                              |
| 7 0 1    | 现在要装入2发生缺页中断                                                      |
| 2 0 1    | 因为7在第18次才用到,所以决定淘汰7 ,但是实际情况中,你并不知道接下来的使用情况 |
|          |                                                                              |
|          |                                                                              |


** 记录型信号量
申请资源就s--,如果s= -1 就表示有一个进程在等待

那么我们说n个进程使用同一个共享变量,允许m (m<n)个可以同时访问,那么信号量的范围是

m,m-1,....,0,-1,m-n

表示有 n-m个进程在等待
